
tinyloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009e9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .shared       00000004  00800100  00800100  000009e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800104  00800104  000009e8  2**0
                  ALLOC
  3 .text         00000930  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .eeprom       00000001  00810000  00810000  000009e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      00000030  00000000  00000000  000009e9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001a0  00000000  00000000  00000a20  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001535  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000968  00000000  00000000  000020f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d8  00000000  00000000  00002a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000034c  00000000  00000000  00003b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000799  00000000  00000000  00003e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fd3  00000000  00000000  0000461d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <InterruptVectorTable>:
#include "../common/device.h"

void InterruptVectorTable(void)  __attribute__ ((naked))  __attribute__ ((section (".vectors")));
void InterruptVectorTable(void)
{
	asm("rjmp main"); //RESET
   0:	66 c4       	rjmp	.+2252   	; 0x8ce <main>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+0):);	//INT0
   2:	fe c4       	rjmp	.+2556   	; 0xa00 <_etext+0xd0>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+2):);	//PCINT0
   4:	fe c4       	rjmp	.+2556   	; 0xa02 <_etext+0xd2>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+4):);	//PCINT1
   6:	fe c4       	rjmp	.+2556   	; 0xa04 <_etext+0xd4>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+6):);	//WDT
   8:	fe c4       	rjmp	.+2556   	; 0xa06 <_etext+0xd6>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+8):); //TIM1_CAPT
   a:	fe c4       	rjmp	.+2556   	; 0xa08 <_etext+0xd8>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+10):); //TIM1_COMPA
   c:	fe c4       	rjmp	.+2556   	; 0xa0a <_etext+0xda>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+12):); //TIM1_COMPB
   e:	fe c4       	rjmp	.+2556   	; 0xa0c <_etext+0xdc>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+14):); //TIM1_OVF
  10:	fe c4       	rjmp	.+2556   	; 0xa0e <_etext+0xde>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+16):); //TIM0_COMPA
  12:	fe c4       	rjmp	.+2556   	; 0xa10 <_etext+0xe0>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+18):); //TIM0_COMPB
  14:	fe c4       	rjmp	.+2556   	; 0xa12 <_etext+0xe2>
	asm("rjmp tickTimer_interruptHandler");	//TIM0_OVF
  16:	28 c4       	rjmp	.+2128   	; 0x868 <tickTimer_interruptHandler>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+22):); //ANA_COMP0
  18:	fe c4       	rjmp	.+2556   	; 0xa16 <_etext+0xe6>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+24):); //ADC_READY
  1a:	fe c4       	rjmp	.+2556   	; 0xa18 <_etext+0xe8>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+26):); //EE_RDY
  1c:	fe c4       	rjmp	.+2556   	; 0xa1a <_etext+0xea>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+28):); //ANA_COMP1
  1e:	fe c4       	rjmp	.+2556   	; 0xa1c <_etext+0xec>
	asm("rjmp com_autobaudCapture_interruptHandler"); //TIM2_CAPT
  20:	86 c0       	rjmp	.+268    	; 0x12e <com_autobaudCapture_interruptHandler>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+32):); //TIM2_COMPA
  22:	fe c4       	rjmp	.+2556   	; 0xa20 <_etext+0xf0>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+34):); //TIM2_COMPB
  24:	fe c4       	rjmp	.+2556   	; 0xa22 <_etext+0xf2>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+36):); //TIM2_OVF
  26:	fe c4       	rjmp	.+2556   	; 0xa24 <_etext+0xf4>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+38):); //SPI
  28:	fe c4       	rjmp	.+2556   	; 0xa26 <_etext+0xf6>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+40):); //USART0_RXS
  2a:	fe c4       	rjmp	.+2556   	; 0xa28 <_etext+0xf8>
	asm("rjmp USART0_RX_interruptHandler");	//USART0_RXC 
  2c:	62 c1       	rjmp	.+708    	; 0x2f2 <USART0_RX_interruptHandler>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+44):); //USART0_DREasm("reti");//
  2e:	fe c4       	rjmp	.+2556   	; 0xa2c <_etext+0xfc>
	asm("rjmp USART0_TX_interruptHandler");	//USART0_TXC
  30:	31 c2       	rjmp	.+1122   	; 0x494 <USART0_TX_interruptHandler>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+48):); //USART1_RXS
  32:	fe c4       	rjmp	.+2556   	; 0xa30 <_etext+0x100>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+50):); //USART1_RXC
  34:	fe c4       	rjmp	.+2556   	; 0xa32 <_etext+0x102>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+52):); //USART1_DRE
  36:	fe c4       	rjmp	.+2556   	; 0xa34 <_etext+0x104>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+54):); //USART1_TXC
  38:	fe c4       	rjmp	.+2556   	; 0xa36 <_etext+0x106>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+56):); //TWI
  3a:	fe c4       	rjmp	.+2556   	; 0xa38 <_etext+0x108>
	asm("rjmp %0" ::  "i" (AppBaseByteAddress+58):); //RESERVED
  3c:	fe c4       	rjmp	.+2556   	; 0xa3a <_etext+0x10a>
	asm("nop");
  3e:	00 00       	nop
	
	asm("rjmp com_transmit_data");
  40:	c4 c1       	rjmp	.+904    	; 0x3ca <com_transmit_data>
  42:	53 c3       	rjmp	.+1702   	; 0x6ea <com_receive_data+0x86>
  44:	5b c3       	rjmp	.+1718   	; 0x6fc <com_receive_data+0x98>
  46:	7d c3       	rjmp	.+1786   	; 0x742 <com_receive_data+0xde>
  48:	a1 c3       	rjmp	.+1858   	; 0x78c <com_receive_data+0x128>
  4a:	a2 c3       	rjmp	.+1860   	; 0x790 <com_receive_data+0x12c>
  4c:	ed c3       	rjmp	.+2010   	; 0x828 <com_receive_data+0x1c4>
  4e:	ec c3       	rjmp	.+2008   	; 0x828 <com_receive_data+0x1c4>
  50:	eb c3       	rjmp	.+2006   	; 0x828 <com_receive_data+0x1c4>
  52:	d1 c3       	rjmp	.+1954   	; 0x7f6 <com_receive_data+0x192>
  54:	d2 c3       	rjmp	.+1956   	; 0x7fa <com_receive_data+0x196>
  56:	d3 c3       	rjmp	.+1958   	; 0x7fe <com_receive_data+0x19a>
  58:	e7 c3       	rjmp	.+1998   	; 0x828 <com_receive_data+0x1c4>
  5a:	e6 c3       	rjmp	.+1996   	; 0x828 <com_receive_data+0x1c4>
  5c:	e5 c3       	rjmp	.+1994   	; 0x828 <com_receive_data+0x1c4>
  5e:	e4 c3       	rjmp	.+1992   	; 0x828 <com_receive_data+0x1c4>
  60:	d7 c3       	rjmp	.+1966   	; 0x810 <com_receive_data+0x1ac>

00000062 <__ctors_end>:
  62:	21 e0       	ldi	r18, 0x01	; 1
  64:	a4 e0       	ldi	r26, 0x04	; 4
  66:	b1 e0       	ldi	r27, 0x01	; 1
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a0 33       	cpi	r26, 0x30	; 48
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <crc16>:
	if(baudsetting & 0x8000) UCSR0A |= 0x02; // Double the USART Transmission Speed
	else UCSR0A &= 0xFD;
	UBRR0H = ((baudsetting >> 8) & 0x000F);
	UBRR0L = (baudsetting & 0x00FF);
	
	TCCR2B = 0x00; // disable timer
  72:	fc 01       	movw	r30, r24
  74:	4f ef       	ldi	r20, 0xFF	; 255
  76:	5f ef       	ldi	r21, 0xFF	; 255
  78:	61 50       	subi	r22, 0x01	; 1
  7a:	e0 f0       	brcs	.+56     	; 0xb4 <crc16+0x42>
  7c:	21 91       	ld	r18, Z+
  7e:	25 27       	eor	r18, r21
  80:	32 2f       	mov	r19, r18
  82:	32 95       	swap	r19
  84:	3f 70       	andi	r19, 0x0F	; 15
  86:	92 2f       	mov	r25, r18
  88:	93 27       	eor	r25, r19
  8a:	29 2f       	mov	r18, r25
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	54 2f       	mov	r21, r20
  90:	44 27       	eor	r20, r20
  92:	42 27       	eor	r20, r18
  94:	53 27       	eor	r21, r19
  96:	c9 01       	movw	r24, r18
  98:	98 2f       	mov	r25, r24
  9a:	88 27       	eor	r24, r24
  9c:	92 95       	swap	r25
  9e:	90 7f       	andi	r25, 0xF0	; 240
  a0:	48 27       	eor	r20, r24
  a2:	59 27       	eor	r21, r25
  a4:	a5 e0       	ldi	r26, 0x05	; 5
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	aa 95       	dec	r26
  ac:	e1 f7       	brne	.-8      	; 0xa6 <crc16+0x34>
  ae:	42 27       	eor	r20, r18
  b0:	53 27       	eor	r21, r19
  b2:	e2 cf       	rjmp	.-60     	; 0x78 <crc16+0x6>
  b4:	ca 01       	movw	r24, r20
  b6:	08 95       	ret

000000b8 <com_reset_autobaud>:
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	9f ef       	ldi	r25, 0xFF	; 255
  bc:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <edge_periode_min+0x1>
  c0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <edge_periode_min>
  c4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <edge_count>
  c8:	08 95       	ret

000000ca <com_autobaud_init>:
  ca:	1f bc       	out	0x2f, r1	; 47
  cc:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
  d0:	1e bc       	out	0x2e, r1	; 46
  d2:	83 e8       	ldi	r24, 0x83	; 131
  d4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
  d8:	12 bc       	out	0x22, r1	; 34
  da:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
  de:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  e2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	81 bb       	out	0x11, r24	; 17
  ea:	e6 cf       	rjmp	.-52     	; 0xb8 <com_reset_autobaud>

000000ec <com_autobaud_update>:
  ec:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <uart_state>
  f0:	81 11       	cpse	r24, r1
  f2:	1c c0       	rjmp	.+56     	; 0x12c <com_autobaud_update+0x40>
  f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <edge_periode_min>
  f8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <edge_periode_min+0x1>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
 10a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <edge_periode_min+0x1>
 116:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <edge_periode_min>
 11a:	ce df       	rcall	.-100    	; 0xb8 <com_reset_autobaud>
 11c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 120:	80 69       	ori	r24, 0x90	; 144
 122:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <uart_state>
 12c:	08 95       	ret

0000012e <com_autobaudCapture_interruptHandler>:
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 148:	30 91 c1 00 	lds	r19, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 14c:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 150:	50 91 c1 00 	lds	r21, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 154:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__bss_start>
 158:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__bss_start+0x1>
 15c:	84 17       	cp	r24, r20
 15e:	95 07       	cpc	r25, r21
 160:	78 f4       	brcc	.+30     	; 0x180 <com_autobaudCapture_interruptHandler+0x52>
 162:	a9 01       	movw	r20, r18
 164:	48 1b       	sub	r20, r24
 166:	59 0b       	sbc	r21, r25
 168:	ca 01       	movw	r24, r20
 16a:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <edge_periode_min>
 16e:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <edge_periode_min+0x1>
 172:	84 17       	cp	r24, r20
 174:	95 07       	cpc	r25, r21
 176:	20 f4       	brcc	.+8      	; 0x180 <com_autobaudCapture_interruptHandler+0x52>
 178:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <edge_periode_min+0x1>
 17c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <edge_periode_min>
 180:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <edge_count>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <edge_count>
 18a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__bss_start+0x1>
 18e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__bss_start>
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <com_init>:
//  Communication
//
//**************************************************************************
void com_init(void)
{
	uart_state = UART_BAUD_DETECT; 
 1a8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <uart_state>
	uart_buffer_position = 0;
 1ac:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <uart_buffer_position>

	uart_tx_size = 0;
 1b0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <uart_tx_size>
	rx_byte_count = 0;
 1b4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rx_byte_count>

	com_error = 0;
 1b8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <com_error>
	uart_timeout_counter = 0;
 1bc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart_timeout_counter>
	
#ifdef RxTxLedEnable
	rxLedTimer5ms = 0;
 1c0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rxLedTimer5ms>
	USART0.CTRLA = 0xC0; // USART Receive / Transmit Complete Interrupt Enable	
#endif

#ifdef ATTINYx41

	UCSR0C = 0b00110110;
 1c4:	86 e3       	ldi	r24, 0x36	; 54
 1c6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	uint8_t rx_byte = UDR0;
 1ca:	e0 e8       	ldi	r30, 0x80	; 128
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
	UCSR0B = 0b01001000; // normal
 1d0:	88 e4       	ldi	r24, 0x48	; 72
 1d2:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	rx_byte = UDR0;
 1d6:	80 81       	ld	r24, Z
	
	REMAP = 0x01; // Pin mapping
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
	UCSR0A |= 0x02; // Double the USART Transmission Speed
 1de:	e6 e8       	ldi	r30, 0x86	; 134
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	82 60       	ori	r24, 0x02	; 2
 1e6:	80 83       	st	Z, r24
	
#endif

	com_autobaud_init();
 1e8:	70 cf       	rjmp	.-288    	; 0xca <com_autobaud_init>

000001ea <com_5ms_tick>:
}

//--------------------------------------------------------------------------  
void com_5ms_tick(void)
{	
	if(uart_state == UART_BAUD_DETECT) return;
 1ea:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <uart_state>
 1ee:	88 23       	and	r24, r24
 1f0:	51 f1       	breq	.+84     	; 0x246 <com_5ms_tick+0x5c>
	
	if(uart_timeout_counter > UART_TIMEOUT)
 1f2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <uart_timeout_counter>
 1f6:	8b 30       	cpi	r24, 0x0B	; 11
 1f8:	48 f0       	brcs	.+18     	; 0x20c <com_5ms_tick+0x22>
	{
		uart_state = UART_IDEL;	
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <uart_state>
		uart_timeout_counter = 0;
 200:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart_timeout_counter>
		uart_buffer_position = 0;
 204:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <uart_buffer_position>
		com_error = 0;
 208:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <com_error>
	}
	
	if(uart_state != UART_IDEL)
 20c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <uart_state>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	29 f0       	breq	.+10     	; 0x21e <com_5ms_tick+0x34>
	{
		uart_timeout_counter ++;
 214:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <uart_timeout_counter>
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <uart_timeout_counter>
	}	
	
#ifdef RxTxLedEnable
	if(rxLedTimer5ms == 0) RxLedOn();
 21e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rxLedTimer5ms>
 222:	81 11       	cpse	r24, r1
 224:	02 c0       	rjmp	.+4      	; 0x22a <com_5ms_tick+0x40>
 226:	de 9a       	sbi	0x1b, 6	; 27
 228:	05 c0       	rjmp	.+10     	; 0x234 <com_5ms_tick+0x4a>
	else if (rxLedTimer5ms == RxTxLedOnTime) RxLedOff();
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rxLedTimer5ms>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	09 f4       	brne	.+2      	; 0x234 <com_5ms_tick+0x4a>
 232:	de 98       	cbi	0x1b, 6	; 27
	if(rxLedTimer5ms <= RxTxLedOnTime)  rxLedTimer5ms++;
 234:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rxLedTimer5ms>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	2c f4       	brge	.+10     	; 0x246 <com_5ms_tick+0x5c>
 23c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rxLedTimer5ms>
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rxLedTimer5ms>
 246:	08 95       	ret

00000248 <com_handler>:
#endif
}

//--------------------------------------------------------------------------  
void com_handler(void)
{
 248:	cf 93       	push	r28
	if(edge_count > 20 ) com_autobaud_update();
 24a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <edge_count>
 24e:	85 31       	cpi	r24, 0x15	; 21
 250:	08 f0       	brcs	.+2      	; 0x254 <com_handler+0xc>
 252:	4c df       	rcall	.-360    	; 0xec <com_autobaud_update>
	
	if(uart_state == UART_RX_COMPLETE)
 254:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <uart_state>
 258:	85 30       	cpi	r24, 0x05	; 5
 25a:	09 f0       	breq	.+2      	; 0x25e <com_handler+0x16>
 25c:	48 c0       	rjmp	.+144    	; 0x2ee <com_handler+0xa6>
	{
		if((!com_error)&&(uart_buffer_position > 4))
 25e:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <com_error>
 262:	c1 11       	cpse	r28, r1
 264:	3f c0       	rjmp	.+126    	; 0x2e4 <com_handler+0x9c>
 266:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uart_buffer_position>
 26a:	85 30       	cpi	r24, 0x05	; 5
 26c:	d8 f1       	brcs	.+118    	; 0x2e4 <com_handler+0x9c>
		{
			uint8_t rx_dataSize = 0;
			rx_dataSize = cobs_decode((uint8_t*)&uart_buffer[0], (const uint8_t*)&uart_buffer[1], uart_buffer_position-1); // uart_buffer[0] -> byte 0 is cobs 0 and can be ignored
 26e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <uart_buffer_position>
 272:	21 50       	subi	r18, 0x01	; 1
// Note: Destination can be 2 bytes shorter than source
// Return: Length of decoded data
//**********************************************************************************************************************
static inline uint8_t cobs_decode(uint8_t *destination, const uint8_t *source, uint8_t length)
{
    if(length < 2) return  0; // If size to short for valid frame -> empty frame / no data
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	48 f1       	brcs	.+82     	; 0x2ca <com_handler+0x82>
    if(source[0] < 1) return  0; // If first byte is null -> empty frame / no data
 278:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <uart_buffer+0x1>
 27c:	88 23       	and	r24, r24
 27e:	29 f1       	breq	.+74     	; 0x2ca <com_handler+0x82>
    if(source[length-1]) return  0; // If last byte is not null -> No valid data
 280:	e2 2f       	mov	r30, r18
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	e2 5f       	subi	r30, 0xF2	; 242
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	90 81       	ld	r25, Z
 28a:	91 11       	cpse	r25, r1
 28c:	1e c0       	rjmp	.+60     	; 0x2ca <com_handler+0x82>

    uint8_t i = 0;
    uint8_t nullIndex = (source[0]-1);
 28e:	81 50       	subi	r24, 0x01	; 1

    for(i=0; i<=length; i++)
    {
        destination[i] = source[i+1]; // +1 because first byte is cobs overhead
 290:	e9 2f       	mov	r30, r25
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	df 01       	movw	r26, r30
 296:	a2 5f       	subi	r26, 0xF2	; 242
 298:	be 4f       	sbci	r27, 0xFE	; 254
 29a:	e0 5f       	subi	r30, 0xF0	; 240
 29c:	fe 4f       	sbci	r31, 0xFE	; 254
 29e:	30 81       	ld	r19, Z
 2a0:	3c 93       	st	X, r19
 2a2:	30 81       	ld	r19, Z
        if(nullIndex == i)
 2a4:	89 13       	cpse	r24, r25
 2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <com_handler+0x6a>
        {
            if(source[i+1] == 0) return i;
 2a8:	33 23       	and	r19, r19
 2aa:	71 f0       	breq	.+28     	; 0x2c8 <com_handler+0x80>

            nullIndex += source[i+1];
 2ac:	83 0f       	add	r24, r19
            destination[i] = 0;
 2ae:	1c 92       	st	X, r1
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <com_handler+0x6e>
        }
        else if(source[i+1] == 0) // In case a 0 is in a position it should not be.
 2b2:	33 23       	and	r19, r19
 2b4:	51 f0       	breq	.+20     	; 0x2ca <com_handler+0x82>
    if(source[length-1]) return  0; // If last byte is not null -> No valid data

    uint8_t i = 0;
    uint8_t nullIndex = (source[0]-1);

    for(i=0; i<=length; i++)
 2b6:	31 e0       	ldi	r19, 0x01	; 1
 2b8:	39 0f       	add	r19, r25
 2ba:	23 17       	cp	r18, r19
 2bc:	10 f0       	brcs	.+4      	; 0x2c2 <com_handler+0x7a>
 2be:	93 2f       	mov	r25, r19
 2c0:	e7 cf       	rjmp	.-50     	; 0x290 <com_handler+0x48>
        else if(source[i+1] == 0) // In case a 0 is in a position it should not be.
        {
            return 0;
        }
    }
    return i-3;
 2c2:	ce ef       	ldi	r28, 0xFE	; 254
 2c4:	c9 0f       	add	r28, r25
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <com_handler+0x82>
    for(i=0; i<=length; i++)
    {
        destination[i] = source[i+1]; // +1 because first byte is cobs overhead
        if(nullIndex == i)
        {
            if(source[i+1] == 0) return i;
 2c8:	c8 2f       	mov	r28, r24
			
			uint16_t crc_16 = crc16((uint8_t*)&uart_buffer[0], rx_dataSize);
 2ca:	6c 2f       	mov	r22, r28
 2cc:	8e e0       	ldi	r24, 0x0E	; 14
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	d0 de       	rcall	.-608    	; 0x72 <crc16>
			if(crc_16 == 0){
 2d2:	89 2b       	or	r24, r25
 2d4:	39 f4       	brne	.+14     	; 0x2e4 <com_handler+0x9c>
				com_receive_data(uart_buffer[0], (uint8_t*)&uart_buffer[1], (rx_dataSize - 3)); // -3 because 2 bytes of crc and data_buffer[0] is passed separately 
 2d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <uart_buffer>
 2da:	4d ef       	ldi	r20, 0xFD	; 253
 2dc:	4c 0f       	add	r20, r28
 2de:	6f e0       	ldi	r22, 0x0F	; 15
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	c0 d1       	rcall	.+896    	; 0x664 <com_receive_data>
			}
		}
		com_error = 0;
 2e4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <com_error>
		uart_state = UART_IDEL;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <uart_state>
	}
}
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <USART0_RX_interruptHandler>:

//--------------------------------------------------------------------------  
void USART0_RX_interruptHandler(void)
{	
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	uart_timeout_counter = 0; // Reset UART Timeout 
 304:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart_timeout_counter>
	
	if(uart_state == UART_IDEL)
 308:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <uart_state>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	29 f4       	brne	.+10     	; 0x31a <USART0_RX_interruptHandler+0x28>
	{
		uart_state = UART_RX;
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <uart_state>
		uart_buffer_position = 0;
 316:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <uart_buffer_position>
	}
	
	if(uart_state != UART_RX) return;
 31a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <uart_state>
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	31 f5       	brne	.+76     	; 0x36e <USART0_RX_interruptHandler+0x7c>
	if(USART0.RXDATAH & 0x46) com_error ++; // check for  Frame Error /  Data OverRun
	uint8_t rx_byte =  USART0.RXDATAL;
#endif

#ifdef ATTINYx41
	if(UCSR0A & 0x14) com_error ++; // check for  Frame Error /  Data OverRun
 322:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 326:	84 71       	andi	r24, 0x14	; 20
 328:	29 f0       	breq	.+10     	; 0x334 <USART0_RX_interruptHandler+0x42>
 32a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <com_error>
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <com_error>
	uint8_t rx_byte =  UDR0;
 334:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
#endif
	
	// Convert sync modified COBS to COBS
	if(rx_byte == 0x00) rx_byte = 0x55;
 338:	88 23       	and	r24, r24
 33a:	21 f0       	breq	.+8      	; 0x344 <USART0_RX_interruptHandler+0x52>
	else if(rx_byte == 0x55) rx_byte = 0x00;
 33c:	85 35       	cpi	r24, 0x55	; 85
 33e:	19 f4       	brne	.+6      	; 0x346 <USART0_RX_interruptHandler+0x54>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	01 c0       	rjmp	.+2      	; 0x346 <USART0_RX_interruptHandler+0x54>
	if(UCSR0A & 0x14) com_error ++; // check for  Frame Error /  Data OverRun
	uint8_t rx_byte =  UDR0;
#endif
	
	// Convert sync modified COBS to COBS
	if(rx_byte == 0x00) rx_byte = 0x55;
 344:	85 e5       	ldi	r24, 0x55	; 85
	else if(rx_byte == 0x55) rx_byte = 0x00;
	
	uart_buffer[uart_buffer_position] = rx_byte;
 346:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <uart_buffer_position>
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	e2 5f       	subi	r30, 0xF2	; 242
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	80 83       	st	Z, r24
	uart_buffer_position++;
 352:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <uart_buffer_position>
 356:	9f 5f       	subi	r25, 0xFF	; 255
 358:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <uart_buffer_position>
	
	if((rx_byte == 0x00)&&(uart_buffer_position > 1))
 35c:	81 11       	cpse	r24, r1
 35e:	07 c0       	rjmp	.+14     	; 0x36e <USART0_RX_interruptHandler+0x7c>
 360:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uart_buffer_position>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	18 f0       	brcs	.+6      	; 0x36e <USART0_RX_interruptHandler+0x7c>
	{
		uart_state = UART_RX_COMPLETE;
 368:	85 e0       	ldi	r24, 0x05	; 5
 36a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <uart_state>
	}
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <transmit_byte>:

//--------------------------------------------------------------------------   
void transmit_byte(void)
{
	if(uart_tx_size > uart_buffer_position) // transmitting
 380:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <uart_tx_size>
 384:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uart_buffer_position>
 388:	89 17       	cp	r24, r25
 38a:	a8 f4       	brcc	.+42     	; 0x3b6 <transmit_byte+0x36>
	{
		uint8_t tx_byte = uart_buffer[uart_buffer_position];
 38c:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <uart_buffer_position>
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	e2 5f       	subi	r30, 0xF2	; 242
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	80 81       	ld	r24, Z
		
		// Convert COBS to sync modified COBS
		if(tx_byte == 0x00) tx_byte = 0x55;
 398:	88 23       	and	r24, r24
 39a:	21 f0       	breq	.+8      	; 0x3a4 <transmit_byte+0x24>
		else if(tx_byte == 0x55) tx_byte = 0x00;
 39c:	85 35       	cpi	r24, 0x55	; 85
 39e:	19 f4       	brne	.+6      	; 0x3a6 <transmit_byte+0x26>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <transmit_byte+0x26>
	if(uart_tx_size > uart_buffer_position) // transmitting
	{
		uint8_t tx_byte = uart_buffer[uart_buffer_position];
		
		// Convert COBS to sync modified COBS
		if(tx_byte == 0x00) tx_byte = 0x55;
 3a4:	85 e5       	ldi	r24, 0x55	; 85
	#ifdef TINYAVR_1SERIES
		USART0.TXDATAL = tx_byte;
	#endif

	#ifdef ATTINYx41
		UDR0 = tx_byte;
 3a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	#endif

		uart_buffer_position ++;
 3aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uart_buffer_position>
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <uart_buffer_position>
 3b4:	08 95       	ret
	}
	else // transmission completed
	{
		USART0_RX_ENABLE;
 3b6:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 3ba:	80 69       	ori	r24, 0x90	; 144
 3bc:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
		uart_state = UART_IDEL;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <uart_state>
	#ifdef RxTxLedEnable
		TxLedOff();
 3c6:	dd 98       	cbi	0x1b, 5	; 27
 3c8:	08 95       	ret

000003ca <com_transmit_data>:
	#endif
	}
}
//-------------------------------------------------------------------------- 
void com_transmit_data(uint8_t instruction_byte,  uint8_t * data, uint8_t size, bool is_nAck)
{	
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	c4 2f       	mov	r28, r20
#ifdef RxTxLedEnable
	TxLedOn();
 3d2:	dd 9a       	sbi	0x1b, 5	; 27
#endif

	uart_state = UART_TX;
 3d4:	92 e0       	ldi	r25, 0x02	; 2
 3d6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <uart_state>
	USART0_RX_DISABLE;
 3da:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 3de:	9f 76       	andi	r25, 0x6F	; 111
 3e0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	
	uint8_t i = 0;
	uart_buffer[0] = 0;
 3e4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <uart_buffer>
	// Copy data to uart buffer
	uart_buffer[2] = instruction_byte;
 3e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <uart_buffer+0x2>
 3ec:	46 2f       	mov	r20, r22
	for(i = 0; i<size; i++)
 3ee:	fb 01       	movw	r30, r22
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	3e 2f       	mov	r19, r30
 3f6:	34 1b       	sub	r19, r20
 3f8:	3c 17       	cp	r19, r28
 3fa:	38 f4       	brcc	.+14     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
	{
		uart_buffer[i+3] = data[i];
 3fc:	31 91       	ld	r19, Z+
 3fe:	dc 01       	movw	r26, r24
 400:	a2 5f       	subi	r26, 0xF2	; 242
 402:	be 4f       	sbci	r27, 0xFE	; 254
 404:	3c 93       	st	X, r19
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	f5 cf       	rjmp	.-22     	; 0x3f4 <com_transmit_data+0x2a>
 40a:	0c 2f       	mov	r16, r28
 40c:	10 e0       	ldi	r17, 0x00	; 0
	}
	size++; // Because of instruction_byte
	
	if(is_nAck == 0)
 40e:	21 11       	cpse	r18, r1
 410:	0e c0       	rjmp	.+28     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
	{
		uint16_t crc = crc16((uint8_t*)&uart_buffer[2],size);
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	6c 0f       	add	r22, r28
 416:	80 e1       	ldi	r24, 0x10	; 16
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	2b de       	rcall	.-938    	; 0x72 <crc16>
		
		uart_buffer[i+3] = (uint8_t) (crc >> 8); // CRC High
 41c:	f8 01       	movw	r30, r16
 41e:	ef 5e       	subi	r30, 0xEF	; 239
 420:	fe 4f       	sbci	r31, 0xFE	; 254
 422:	90 83       	st	Z, r25
		uart_buffer[i+4] = (uint8_t) (crc & 0xFF); // CRC Low
 424:	f8 01       	movw	r30, r16
 426:	ee 5e       	subi	r30, 0xEE	; 238
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	80 83       	st	Z, r24
 42c:	08 c0       	rjmp	.+16     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
	}
	else
	{
		uart_buffer[i+3] = 0; // CRC High
 42e:	f8 01       	movw	r30, r16
 430:	ef 5e       	subi	r30, 0xEF	; 239
 432:	fe 4f       	sbci	r31, 0xFE	; 254
 434:	10 82       	st	Z, r1
		uart_buffer[i+4] = 0; // CRC Low
 436:	f8 01       	movw	r30, r16
 438:	ee 5e       	subi	r30, 0xEE	; 238
 43a:	fe 4f       	sbci	r31, 0xFE	; 254
 43c:	10 82       	st	Z, r1
	}
	size+=2; // Because of crc
 43e:	cd 5f       	subi	r28, 0xFD	; 253
static inline uint8_t cobs_encode(uint8_t *destination, const uint8_t *source, uint8_t source_length)
{
    uint8_t nullIndex = 0;
    uint8_t i = 0;

    for(i = 1; i<source_length+1; i++)
 440:	81 e0       	ldi	r24, 0x01	; 1
// Note: Destination needs to be 2 Bytes larger than source
// Return: Length of encoded data
//**********************************************************************************************************************
static inline uint8_t cobs_encode(uint8_t *destination, const uint8_t *source, uint8_t source_length)
{
    uint8_t nullIndex = 0;
 442:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t i = 0;

    for(i = 1; i<source_length+1; i++)
 444:	4c 2f       	mov	r20, r28
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	f9 01       	movw	r30, r18
 44e:	e1 5f       	subi	r30, 0xF1	; 241
 450:	fe 4f       	sbci	r31, 0xFE	; 254
 452:	42 17       	cp	r20, r18
 454:	53 07       	cpc	r21, r19
 456:	6c f0       	brlt	.+26     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
    {
        destination[i] = source[i-1];
 458:	20 81       	ld	r18, Z
        if(destination[i] == 0)
 45a:	21 11       	cpse	r18, r1
 45c:	08 c0       	rjmp	.+16     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
        {
            destination[nullIndex]= (i-nullIndex);
 45e:	e9 2f       	mov	r30, r25
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	e1 5f       	subi	r30, 0xF1	; 241
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	28 2f       	mov	r18, r24
 468:	29 1b       	sub	r18, r25
 46a:	20 83       	st	Z, r18
 46c:	98 2f       	mov	r25, r24
static inline uint8_t cobs_encode(uint8_t *destination, const uint8_t *source, uint8_t source_length)
{
    uint8_t nullIndex = 0;
    uint8_t i = 0;

    for(i = 1; i<source_length+1; i++)
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	eb cf       	rjmp	.-42     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
        {
            destination[nullIndex]= (i-nullIndex);
            nullIndex = i;
        }
    }
    destination[nullIndex]= (i-nullIndex);
 472:	a9 2f       	mov	r26, r25
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	a1 5f       	subi	r26, 0xF1	; 241
 478:	be 4f       	sbci	r27, 0xFE	; 254
 47a:	28 2f       	mov	r18, r24
 47c:	29 1b       	sub	r18, r25
 47e:	2c 93       	st	X, r18
    destination[i] = 0;
 480:	10 82       	st	Z, r1
	
	uint8_t tx_size = cobs_encode((uint8_t*)&uart_buffer[1],(const uint8_t*)&uart_buffer[2],size);
	tx_size++;
 482:	8e 5f       	subi	r24, 0xFE	; 254
	
	// Start Transmitting
	uart_tx_size = tx_size;
 484:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <uart_tx_size>
	uart_buffer_position = 0;
 488:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <uart_buffer_position>
	
	transmit_byte();
}
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
	
	// Start Transmitting
	uart_tx_size = tx_size;
	uart_buffer_position = 0;
	
	transmit_byte();
 492:	76 cf       	rjmp	.-276    	; 0x380 <transmit_byte>

00000494 <USART0_TX_interruptHandler>:
}
//--------------------------------------------------------------------------   
void USART0_TX_interruptHandler(void) 
{
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
	uart_timeout_counter = 0; // Reset UART Timeout
 4b6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart_timeout_counter>
	transmit_byte();
 4ba:	62 df       	rcall	.-316    	; 0x380 <transmit_byte>

#ifdef  TINYAVR_1SERIES
	USART0.STATUS = 0x40; // USART Transmit Complete Interrupt Clear
#endif
	
}
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <crc16_addByte>:
// Polynomial : 0x1021
// Note       :
//**********************************************************************************************************************
static inline uint16_t crc16_addByte(uint16_t crc, uint8_t data)
{
	uint8_t x = crc >> 8 ^ data;
 4de:	96 27       	eor	r25, r22
	x ^= x>>4;
 4e0:	29 2f       	mov	r18, r25
 4e2:	22 95       	swap	r18
 4e4:	2f 70       	andi	r18, 0x0F	; 15
 4e6:	92 27       	eor	r25, r18
	return (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 4e8:	69 2f       	mov	r22, r25
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	38 2f       	mov	r19, r24
 4f2:	26 27       	eor	r18, r22
 4f4:	37 27       	eor	r19, r23
 4f6:	cb 01       	movw	r24, r22
 4f8:	98 2f       	mov	r25, r24
 4fa:	88 27       	eor	r24, r24
 4fc:	92 95       	swap	r25
 4fe:	90 7f       	andi	r25, 0xF0	; 240
 500:	28 27       	eor	r18, r24
 502:	39 27       	eor	r19, r25
 504:	cb 01       	movw	r24, r22
 506:	55 e0       	ldi	r21, 0x05	; 5
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	5a 95       	dec	r21
 50e:	e1 f7       	brne	.-8      	; 0x508 <crc16_addByte+0x2a>
}
 510:	82 27       	eor	r24, r18
 512:	93 27       	eor	r25, r19
 514:	08 95       	ret

00000516 <app_main>:
#define APP_5MS_TICK_ADDR (AppBaseWordAddress+INTERRUPT_VECTOR_TABLE_SIZE+2)

typedef void (*PF_MAIN)(void);
static inline void app_main (void)
{
	((PF_MAIN) (APP_MAIN ))();
 516:	e0 e0       	ldi	r30, 0x00	; 0
 518:	f5 e0       	ldi	r31, 0x05	; 5
 51a:	09 94       	ijmp

0000051c <device_run>:
				else shared.deviceState = APP_CRC_ERROR;
				break;
				
			case APP_START:
				app_main();
				shared.deviceState = APP_RUNNING;
 51c:	14 e0       	ldi	r17, 0x04	; 4
				app_main();
				break;
			
			case APP_SHUTDOWN:
				app_main();
				shared.deviceState = APP_STOPPED;
 51e:	06 e0       	ldi	r16, 0x06	; 6
//
//**************************************************************************
static inline uint16_t bootloader_checkAppCRC(uint16_t crcValue)
{
	crcValue = crc16_addByte(crcValue,pgm_read_byte(FlashByteSize-2));
	crcValue = crc16_addByte(crcValue,pgm_read_byte(FlashByteSize-1));
 520:	ee 24       	eor	r14, r14
 522:	ea 94       	dec	r14
 524:	8f e1       	ldi	r24, 0x1F	; 31
 526:	f8 2e       	mov	r15, r24
		switch(shared.deviceState)
		{
			case APP_CHECK_CRC:
				shared.appCrc = bootloader_appCRC();
				if(bootloader_checkAppCRC(shared.appCrc) == 0) shared.deviceState = APP_START;
				else shared.deviceState = APP_CRC_ERROR;
 528:	92 e0       	ldi	r25, 0x02	; 2
 52a:	d9 2e       	mov	r13, r25
		
		switch(shared.deviceState)
		{
			case APP_CHECK_CRC:
				shared.appCrc = bootloader_appCRC();
				if(bootloader_checkAppCRC(shared.appCrc) == 0) shared.deviceState = APP_START;
 52c:	23 e0       	ldi	r18, 0x03	; 3
 52e:	c2 2e       	mov	r12, r18

void device_run(void)
{
	while(1)
	{
		com_handler();
 530:	8b de       	rcall	.-746    	; 0x248 <com_handler>
		reset_watchdog();
 532:	a8 95       	wdr
		
		switch(shared.deviceState)
 534:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 538:	83 30       	cpi	r24, 0x03	; 3
 53a:	51 f1       	breq	.+84     	; 0x590 <device_run+0x74>
 53c:	38 f4       	brcc	.+14     	; 0x54c <device_run+0x30>
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	61 f5       	brne	.+88     	; 0x59a <device_run+0x7e>
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	9f ef       	ldi	r25, 0xFF	; 255
 546:	c0 e0       	ldi	r28, 0x00	; 0
 548:	da e0       	ldi	r29, 0x0A	; 10
 54a:	08 c0       	rjmp	.+16     	; 0x55c <device_run+0x40>
 54c:	84 30       	cpi	r24, 0x04	; 4
 54e:	21 f1       	breq	.+72     	; 0x598 <device_run+0x7c>
 550:	85 30       	cpi	r24, 0x05	; 5
 552:	19 f5       	brne	.+70     	; 0x59a <device_run+0x7e>
			case APP_RUNNING:
				app_main();
				break;
			
			case APP_SHUTDOWN:
				app_main();
 554:	e0 df       	rcall	.-64     	; 0x516 <app_main>
				shared.deviceState = APP_STOPPED;
 556:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <_edata+0x3>
				break;
 55a:	1f c0       	rjmp	.+62     	; 0x59a <device_run+0x7e>
static inline uint16_t bootloader_appCRC(void)
{
	uint16_t CRC_value = CRC_INIT_VALUE;
	for(uint16_t i = AppBaseByteAddress; i < FlashByteSize-2; i++)
	{
		CRC_value = crc16_addByte(CRC_value,pgm_read_byte(i));
 55c:	fe 01       	movw	r30, r28
 55e:	64 91       	lpm	r22, Z
 560:	be df       	rcall	.-132    	; 0x4de <crc16_addByte>
//
//**************************************************************************
static inline uint16_t bootloader_appCRC(void)
{
	uint16_t CRC_value = CRC_INIT_VALUE;
	for(uint16_t i = AppBaseByteAddress; i < FlashByteSize-2; i++)
 562:	21 96       	adiw	r28, 0x01	; 1
 564:	ce 3f       	cpi	r28, 0xFE	; 254
 566:	ff e1       	ldi	r31, 0x1F	; 31
 568:	df 07       	cpc	r29, r31
 56a:	c1 f7       	brne	.-16     	; 0x55c <device_run+0x40>
		reset_watchdog();
		
		switch(shared.deviceState)
		{
			case APP_CHECK_CRC:
				shared.appCrc = bootloader_appCRC();
 56c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_edata+0x2>
 570:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
//	Return value: Return 0 if App CRC is valid
//
//**************************************************************************
static inline uint16_t bootloader_checkAppCRC(uint16_t crcValue)
{
	crcValue = crc16_addByte(crcValue,pgm_read_byte(FlashByteSize-2));
 574:	fe 01       	movw	r30, r28
 576:	64 91       	lpm	r22, Z
 578:	b2 df       	rcall	.-156    	; 0x4de <crc16_addByte>
	crcValue = crc16_addByte(crcValue,pgm_read_byte(FlashByteSize-1));
 57a:	f7 01       	movw	r30, r14
 57c:	64 91       	lpm	r22, Z
 57e:	af df       	rcall	.-162    	; 0x4de <crc16_addByte>
				if(bootloader_checkAppCRC(shared.appCrc) == 0) shared.deviceState = APP_START;
 580:	89 2b       	or	r24, r25
 582:	19 f4       	brne	.+6      	; 0x58a <device_run+0x6e>
 584:	c0 92 03 01 	sts	0x0103, r12	; 0x800103 <_edata+0x3>
 588:	08 c0       	rjmp	.+16     	; 0x59a <device_run+0x7e>
				else shared.deviceState = APP_CRC_ERROR;
 58a:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <_edata+0x3>
 58e:	05 c0       	rjmp	.+10     	; 0x59a <device_run+0x7e>
				break;
				
			case APP_START:
				app_main();
 590:	c2 df       	rcall	.-124    	; 0x516 <app_main>
				shared.deviceState = APP_RUNNING;
 592:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <_edata+0x3>
				break;
 596:	01 c0       	rjmp	.+2      	; 0x59a <device_run+0x7e>
			
			case APP_RUNNING:
				app_main();
 598:	be df       	rcall	.-132    	; 0x516 <app_main>
			case APP_UNKNOWN:
			case APP_STOPPED:
				break;
		}

		reset_watchdog();
 59a:	a8 95       	wdr
	}	
 59c:	c9 cf       	rjmp	.-110    	; 0x530 <device_run+0x14>

0000059e <device_eraseApp>:
}

void device_eraseApp(void)
{
	if(shared.deviceState == APP_START || shared.deviceState == APP_RUNNING)
 59e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 5a2:	83 50       	subi	r24, 0x03	; 3
 5a4:	82 30       	cpi	r24, 0x02	; 2
 5a6:	20 f4       	brcc	.+8      	; 0x5b0 <device_eraseApp+0x12>
	{
		shared.deviceState = APP_SHUTDOWN;
 5a8:	85 e0       	ldi	r24, 0x05	; 5
 5aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
		app_main();
 5ae:	b3 df       	rcall	.-154    	; 0x516 <app_main>
	}
	
	shared.deviceState = APP_CRC_ERROR;
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
//	Return value: None
//
//**************************************************************************
static inline void bootloader_eraseAppSection(void)
{
	cli();
 5b6:	f8 94       	cli
	eeprom_busy_wait ();
 5b8:	e1 99       	sbic	0x1c, 1	; 28
 5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <device_eraseApp+0x1a>
 5bc:	e0 e0       	ldi	r30, 0x00	; 0
 5be:	fa e0       	ldi	r31, 0x0A	; 10
	for(uint16_t i = AppBaseByteAddress; i< FlashByteSize; i += (FlashPageByteSize*4))
	{
		asm("WDR");
		boot_page_erase(i);
 5c0:	83 e0       	ldi	r24, 0x03	; 3
{
	cli();
	eeprom_busy_wait ();
	for(uint16_t i = AppBaseByteAddress; i< FlashByteSize; i += (FlashPageByteSize*4))
	{
		asm("WDR");
 5c2:	a8 95       	wdr
		boot_page_erase(i);
 5c4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 5c8:	e8 95       	spm
		boot_spm_busy_wait();      // Wait until the memory is erased.
 5ca:	07 b6       	in	r0, 0x37	; 55
 5cc:	00 fc       	sbrc	r0, 0
 5ce:	fd cf       	rjmp	.-6      	; 0x5ca <device_eraseApp+0x2c>
//**************************************************************************
static inline void bootloader_eraseAppSection(void)
{
	cli();
	eeprom_busy_wait ();
	for(uint16_t i = AppBaseByteAddress; i< FlashByteSize; i += (FlashPageByteSize*4))
 5d0:	e0 5c       	subi	r30, 0xC0	; 192
 5d2:	ff 4f       	sbci	r31, 0xFF	; 255
 5d4:	e1 15       	cp	r30, r1
 5d6:	90 e2       	ldi	r25, 0x20	; 32
 5d8:	f9 07       	cpc	r31, r25
 5da:	99 f7       	brne	.-26     	; 0x5c2 <device_eraseApp+0x24>
	{
		asm("WDR");
		boot_page_erase(i);
		boot_spm_busy_wait();      // Wait until the memory is erased.
	}
	sei();
 5dc:	78 94       	sei
 5de:	08 95       	ret

000005e0 <device_reboot>:
	RSTCTRL.SWRR = 0x01;
#endif

#ifdef ATTINYx41
	// NOTO: this is not resetting the peripherals
	asm("LDI R30, 0x00");
 5e0:	e0 e0       	ldi	r30, 0x00	; 0
	asm("LDI R31, 0x00");
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
	asm("IJMP");
 5e4:	09 94       	ijmp
 5e6:	08 95       	ret

000005e8 <device_getAddress>:
	return false;
}

uint8_t device_getAddress(void)
{
	return eeprom_read_byte(&eeDeviceAddress);
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	87 c1       	rjmp	.+782    	; 0x8fc <eeprom_read_byte>

000005ee <device_init>:

uint8_t device_getAddress(void);

void device_init(void)
{
	shared.address = device_getAddress();
 5ee:	fc df       	rcall	.-8      	; 0x5e8 <device_getAddress>
	if(shared.address >= 0xF) shared.address = 0x00; // in case the EEPROM was never programmed or address is out of range (>15)
 5f0:	8f 30       	cpi	r24, 0x0F	; 15
 5f2:	18 f4       	brcc	.+6      	; 0x5fa <device_init+0xc>

uint8_t device_getAddress(void);

void device_init(void)
{
	shared.address = device_getAddress();
 5f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <device_init+0x10>
	if(shared.address >= 0xF) shared.address = 0x00; // in case the EEPROM was never programmed or address is out of range (>15)
 5fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	shared.deviceState = APP_STOPPED;
 5fe:	86 e0       	ldi	r24, 0x06	; 6
 600:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
	{
		shared.deviceState = APP_CHECK_CRC;
	}
#endif
	
	sei();
 604:	78 94       	sei
	tickTimer_init();
 606:	24 d1       	rcall	.+584    	; 0x850 <tickTimer_init>
	com_init();
 608:	cf cd       	rjmp	.-1122   	; 0x1a8 <com_init>

0000060a <device_updateAddress>:
#endif

}

uint8_t device_updateAddress(uint8_t address)
{
 60a:	cf 93       	push	r28
	// Note: Address changes apply AFTER restart of the device
	if((address > 0x00)&&(address <0x0F))
 60c:	9f ef       	ldi	r25, 0xFF	; 255
 60e:	98 0f       	add	r25, r24
 610:	9e 30       	cpi	r25, 0x0E	; 14
 612:	40 f4       	brcc	.+16     	; 0x624 <device_updateAddress+0x1a>
 614:	c8 2f       	mov	r28, r24
	{
		eeprom_update_byte(&eeDeviceAddress, address);
 616:	68 2f       	mov	r22, r24
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	77 d1       	rcall	.+750    	; 0x90c <eeprom_update_byte>
		if(address == device_getAddress()) return true;
 61e:	e4 df       	rcall	.-56     	; 0x5e8 <device_getAddress>
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	c8 13       	cpse	r28, r24
	}
	
	return false;
 624:	90 e0       	ldi	r25, 0x00	; 0
}
 626:	89 2f       	mov	r24, r25
 628:	cf 91       	pop	r28
 62a:	08 95       	ret

0000062c <crc16_addByte>:
// Polynomial : 0x1021
// Note       :
//**********************************************************************************************************************
static inline uint16_t crc16_addByte(uint16_t crc, uint8_t data)
{
	uint8_t x = crc >> 8 ^ data;
 62c:	96 27       	eor	r25, r22
	x ^= x>>4;
 62e:	29 2f       	mov	r18, r25
 630:	22 95       	swap	r18
 632:	2f 70       	andi	r18, 0x0F	; 15
 634:	92 27       	eor	r25, r18
	return (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 636:	69 2f       	mov	r22, r25
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	38 2f       	mov	r19, r24
 640:	26 27       	eor	r18, r22
 642:	37 27       	eor	r19, r23
 644:	cb 01       	movw	r24, r22
 646:	98 2f       	mov	r25, r24
 648:	88 27       	eor	r24, r24
 64a:	92 95       	swap	r25
 64c:	90 7f       	andi	r25, 0xF0	; 240
 64e:	28 27       	eor	r18, r24
 650:	39 27       	eor	r19, r25
 652:	cb 01       	movw	r24, r22
 654:	55 e0       	ldi	r21, 0x05	; 5
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	5a 95       	dec	r21
 65c:	e1 f7       	brne	.-8      	; 0x656 <crc16_addByte+0x2a>
}
 65e:	82 27       	eor	r24, r18
 660:	93 27       	eor	r25, r19
 662:	08 95       	ret

00000664 <com_receive_data>:
//
//	Communication Handler -> RX Complete Call Back
//
//**************************************************************************  
void com_receive_data(uint8_t instruction_byte, uint8_t *data, uint8_t size)
{
 664:	ef 92       	push	r14
 666:	ff 92       	push	r15
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	64 97       	sbiw	r28, 0x14	; 20
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	f8 94       	cli
 678:	de bf       	out	0x3e, r29	; 62
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	cd bf       	out	0x3d, r28	; 61
	// Extract destination address from received data
	uint8_t des_address = (instruction_byte >> 4);
 67e:	38 2f       	mov	r19, r24
 680:	32 95       	swap	r19
 682:	3f 70       	andi	r19, 0x0F	; 15
		
	// Extract command from received data
	uint8_t command = (instruction_byte & 0x0F);
	
	if(des_address != shared.address && des_address != BROADCAST_ADDRESS) return;
 684:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 688:	39 17       	cp	r19, r25
 68a:	19 f0       	breq	.+6      	; 0x692 <com_receive_data+0x2e>
 68c:	3f 30       	cpi	r19, 0x0F	; 15
 68e:	09 f0       	breq	.+2      	; 0x692 <com_receive_data+0x2e>
 690:	d3 c0       	rjmp	.+422    	; 0x838 <com_receive_data+0x1d4>
 692:	db 01       	movw	r26, r22
 694:	18 2f       	mov	r17, r24
{
	// Extract destination address from received data
	uint8_t des_address = (instruction_byte >> 4);
		
	// Extract command from received data
	uint8_t command = (instruction_byte & 0x0F);
 696:	8f 70       	andi	r24, 0x0F	; 15
	
	if(des_address != shared.address && des_address != BROADCAST_ADDRESS) return;
	
	#ifdef RxTxLedEnable
		rxLedTimer5ms = 0;
 698:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rxLedTimer5ms>
	#endif
		
	if(command != 15)
 69c:	8f 30       	cpi	r24, 0x0F	; 15
 69e:	a1 f0       	breq	.+40     	; 0x6c8 <com_receive_data+0x64>
	{
		if(shared.deviceState == APP_RUNNING)
 6a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 6a4:	94 30       	cpi	r25, 0x04	; 4
 6a6:	49 f4       	brne	.+18     	; 0x6ba <com_receive_data+0x56>
}

typedef void (*PF_UINT82P1B)(uint8_t,uint8_t*,uint8_t, bool);
static inline void app_com_receive_data(uint8_t instruction, uint8_t *data, uint8_t size, bool broadcast)
{
	((PF_UINT82P1B) (APP_COM_RECEIVE_DATA_ADDR ))(instruction, data, size, broadcast);
 6a8:	21 e0       	ldi	r18, 0x01	; 1
 6aa:	3f 30       	cpi	r19, 0x0F	; 15
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <com_receive_data+0x4c>
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	bd 01       	movw	r22, r26
 6b2:	ef e1       	ldi	r30, 0x1F	; 31
 6b4:	f5 e0       	ldi	r31, 0x05	; 5
 6b6:	09 95       	icall
 6b8:	bf c0       	rjmp	.+382    	; 0x838 <com_receive_data+0x1d4>
		{
			app_com_receive_data(command, data, size, (des_address == BROADCAST_ADDRESS));
		}
		else if(shared.deviceState == APP_STOPPED)
 6ba:	96 30       	cpi	r25, 0x06	; 6
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <com_receive_data+0x5c>
 6be:	bc c0       	rjmp	.+376    	; 0x838 <com_receive_data+0x1d4>
		{
			shared.deviceState = APP_CHECK_CRC;
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
 6c6:	b8 c0       	rjmp	.+368    	; 0x838 <com_receive_data+0x1d4>
		}
	}
	else// If kernel command is received
	{
				
		kernel_command_t subcommand = data[0];
 6c8:	ec 91       	ld	r30, X
		uint16_t u16_temp = 0;
		uint8_t Ack_data[20];
		Ack_data[0] = subcommand | 0x80;
 6ca:	8e 2f       	mov	r24, r30
 6cc:	80 68       	ori	r24, 0x80	; 128
 6ce:	89 83       	std	Y+1, r24	; 0x01
		uint8_t Ack_size = 1;
		uint8_t cmd_error = 0;
		
		if(size == 0) // in case no sub-command was received
 6d0:	44 23       	and	r20, r20
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <com_receive_data+0x72>
 6d4:	a7 c0       	rjmp	.+334    	; 0x824 <com_receive_data+0x1c0>
			cmd_error++;
			subcommand = 0xFF;
		}
			
		// Decode kernel sub-command
		switch(subcommand)
 6d6:	4e 2f       	mov	r20, r30
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	40 31       	cpi	r20, 0x10	; 16
 6dc:	51 05       	cpc	r21, r1
 6de:	08 f0       	brcs	.+2      	; 0x6e2 <com_receive_data+0x7e>
 6e0:	a3 c0       	rjmp	.+326    	; 0x828 <com_receive_data+0x1c4>
 6e2:	fa 01       	movw	r30, r20
 6e4:	ef 5d       	subi	r30, 0xDF	; 223
 6e6:	ff 4f       	sbci	r31, 0xFF	; 255
 6e8:	09 94       	ijmp
		{
			case CMD_GET_DEVICE_STATE:
					Ack_data[1] = (shared.address<<4) | (uint8_t)shared.deviceState;
 6ea:	92 95       	swap	r25
 6ec:	90 7f       	andi	r25, 0xF0	; 240
 6ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 6f2:	98 2b       	or	r25, r24
 6f4:	9a 83       	std	Y+2, r25	; 0x02
		kernel_command_t subcommand = data[0];
		uint16_t u16_temp = 0;
		uint8_t Ack_data[20];
		Ack_data[0] = subcommand | 0x80;
		uint8_t Ack_size = 1;
		uint8_t cmd_error = 0;
 6f6:	20 e0       	ldi	r18, 0x00	; 0
		// Decode kernel sub-command
		switch(subcommand)
		{
			case CMD_GET_DEVICE_STATE:
					Ack_data[1] = (shared.address<<4) | (uint8_t)shared.deviceState;
					Ack_size ++;
 6f8:	42 e0       	ldi	r20, 0x02	; 2
					break;
 6fa:	98 c0       	rjmp	.+304    	; 0x82c <com_receive_data+0x1c8>
				
			case CMD_GET_DEVICE_INFO:
					Ack_data[1] = (shared.address<<4) | (uint8_t)shared.deviceState;
 6fc:	92 95       	swap	r25
 6fe:	90 7f       	andi	r25, 0xF0	; 240
 700:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 704:	98 2b       	or	r25, r24
 706:	9a 83       	std	Y+2, r25	; 0x02
					Ack_data[2] = KERNEL_REVISION;
 708:	90 e1       	ldi	r25, 0x10	; 16
 70a:	9b 83       	std	Y+3, r25	; 0x03
					Ack_data[3] = CONTROLLER_ID;
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	8c 83       	std	Y+4, r24	; 0x04
					Ack_data[4] = DEVICE_ID;
 710:	23 e0       	ldi	r18, 0x03	; 3
 712:	2d 83       	std	Y+5, r18	; 0x05
					Ack_data[5] = DEVICE_HW_REV;
 714:	22 e1       	ldi	r18, 0x12	; 18
 716:	2e 83       	std	Y+6, r18	; 0x06
				
					Ack_data[6] = (AppBaseByteAddress>>8);
 718:	2a e0       	ldi	r18, 0x0A	; 10
 71a:	2f 83       	std	Y+7, r18	; 0x07
					Ack_data[7] = (AppBaseByteAddress&0xff);
 71c:	18 86       	std	Y+8, r1	; 0x08
				
					Ack_data[8] = (AppSize>>8);
 71e:	26 e1       	ldi	r18, 0x16	; 22
 720:	29 87       	std	Y+9, r18	; 0x09
					Ack_data[9] = (AppSize&0xff);
 722:	1a 86       	std	Y+10, r1	; 0x0a
				
					Ack_data[10] = (AppEEPROMAddress>>8);
 724:	1b 86       	std	Y+11, r1	; 0x0b
					Ack_data[11] = (AppEEPROMAddress&0xff);
 726:	25 e0       	ldi	r18, 0x05	; 5
 728:	2c 87       	std	Y+12, r18	; 0x0c
				
					Ack_data[12] = (AppEepromSize>>8);
 72a:	8d 87       	std	Y+13, r24	; 0x0d
					Ack_data[13] = (AppEepromSize&0xff);
 72c:	2b ef       	ldi	r18, 0xFB	; 251
 72e:	2e 87       	std	Y+14, r18	; 0x0e
				
					Ack_data[14] = (AppRamAddress>>8);
 730:	8f 87       	std	Y+15, r24	; 0x0f
					Ack_data[15] = (AppRamAddress&0xff);
 732:	80 e8       	ldi	r24, 0x80	; 128
 734:	88 8b       	std	Y+16, r24	; 0x10
				
					Ack_data[16] = (AppRamSize>>8);
 736:	19 8a       	std	Y+17, r1	; 0x11
					Ack_data[17] = (AppRamSize&0xff);
 738:	8a 8b       	std	Y+18, r24	; 0x12
				
					Ack_data[18] = FlashPageByteSize;
 73a:	9b 8b       	std	Y+19, r25	; 0x13
		kernel_command_t subcommand = data[0];
		uint16_t u16_temp = 0;
		uint8_t Ack_data[20];
		Ack_data[0] = subcommand | 0x80;
		uint8_t Ack_size = 1;
		uint8_t cmd_error = 0;
 73c:	20 e0       	ldi	r18, 0x00	; 0
				
					Ack_data[16] = (AppRamSize>>8);
					Ack_data[17] = (AppRamSize&0xff);
				
					Ack_data[18] = FlashPageByteSize;
					Ack_size += 18;
 73e:	43 e1       	ldi	r20, 0x13	; 19
					break;
 740:	75 c0       	rjmp	.+234    	; 0x82c <com_receive_data+0x1c8>
			cmd_error++;
			subcommand = 0xFF;
		}
			
		// Decode kernel sub-command
		switch(subcommand)
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	9f ef       	ldi	r25, 0xFF	; 255
 746:	e1 2c       	mov	r14, r1
 748:	2a e0       	ldi	r18, 0x0A	; 10
 74a:	f2 2e       	mov	r15, r18
static inline uint16_t bootloader_appCRC(void)
{
	uint16_t CRC_value = CRC_INIT_VALUE;
	for(uint16_t i = AppBaseByteAddress; i < FlashByteSize-2; i++)
	{
		CRC_value = crc16_addByte(CRC_value,pgm_read_byte(i));
 74c:	f7 01       	movw	r30, r14
 74e:	64 91       	lpm	r22, Z
 750:	6d df       	rcall	.-294    	; 0x62c <crc16_addByte>
//
//**************************************************************************
static inline uint16_t bootloader_appCRC(void)
{
	uint16_t CRC_value = CRC_INIT_VALUE;
	for(uint16_t i = AppBaseByteAddress; i < FlashByteSize-2; i++)
 752:	ff ef       	ldi	r31, 0xFF	; 255
 754:	ef 1a       	sub	r14, r31
 756:	ff 0a       	sbc	r15, r31
 758:	2e ef       	ldi	r18, 0xFE	; 254
 75a:	e2 16       	cp	r14, r18
 75c:	2f e1       	ldi	r18, 0x1F	; 31
 75e:	f2 06       	cpc	r15, r18
 760:	a9 f7       	brne	.-22     	; 0x74c <com_receive_data+0xe8>
					Ack_size += 18;
					break;
				
			case CMD_GET_APP_CRC:
					u16_temp = bootloader_appCRC();
					Ack_data[2] = (u16_temp &0x00FF);
 762:	8b 83       	std	Y+3, r24	; 0x03
					Ack_data[1] = (u16_temp >>8);
 764:	9a 83       	std	Y+2, r25	; 0x02
					if(shared.deviceState == APP_CRC_ERROR && bootloader_checkAppCRC(u16_temp) == 0)
 766:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <_edata+0x3>
 76a:	22 30       	cpi	r18, 0x02	; 2
 76c:	09 f0       	breq	.+2      	; 0x770 <com_receive_data+0x10c>
 76e:	57 c0       	rjmp	.+174    	; 0x81e <com_receive_data+0x1ba>
//	Return value: Return 0 if App CRC is valid
//
//**************************************************************************
static inline uint16_t bootloader_checkAppCRC(uint16_t crcValue)
{
	crcValue = crc16_addByte(crcValue,pgm_read_byte(FlashByteSize-2));
 770:	f7 01       	movw	r30, r14
 772:	64 91       	lpm	r22, Z
 774:	5b df       	rcall	.-330    	; 0x62c <crc16_addByte>
	crcValue = crc16_addByte(crcValue,pgm_read_byte(FlashByteSize-1));
 776:	ef ef       	ldi	r30, 0xFF	; 255
 778:	ff e1       	ldi	r31, 0x1F	; 31
 77a:	64 91       	lpm	r22, Z
 77c:	57 df       	rcall	.-338    	; 0x62c <crc16_addByte>
 77e:	89 2b       	or	r24, r25
 780:	09 f0       	breq	.+2      	; 0x784 <com_receive_data+0x120>
 782:	4d c0       	rjmp	.+154    	; 0x81e <com_receive_data+0x1ba>
					{
						shared.deviceState = APP_STOPPED;
 784:	86 e0       	ldi	r24, 0x06	; 6
 786:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
 78a:	49 c0       	rjmp	.+146    	; 0x81e <com_receive_data+0x1ba>
			
					Ack_size += 2;
					break;
								
			case CMD_ERASE_APP: 
					device_eraseApp();
 78c:	08 df       	rcall	.-496    	; 0x59e <device_eraseApp>
 78e:	4c c0       	rjmp	.+152    	; 0x828 <com_receive_data+0x1c4>
					break;
						
			case CMD_WRITE_PAGE:
					u16_temp = (uint16_t)(data[1]<<8);
 790:	11 96       	adiw	r26, 0x01	; 1
 792:	2c 91       	ld	r18, X
 794:	11 97       	sbiw	r26, 0x01	; 1
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	32 2f       	mov	r19, r18
 79a:	22 27       	eor	r18, r18
					u16_temp |= (uint16_t)(data[2]);
 79c:	12 96       	adiw	r26, 0x02	; 2
 79e:	8c 91       	ld	r24, X
 7a0:	12 97       	sbiw	r26, 0x02	; 2
 7a2:	28 2b       	or	r18, r24
				
					if((u16_temp >= AppBaseByteAddress)&&(u16_temp <= (FlashByteSize - BootloadTransmitChunkSize)+1)) // Check if Address location is in application sector
 7a4:	c9 01       	movw	r24, r18
 7a6:	9a 50       	subi	r25, 0x0A	; 10
 7a8:	82 3f       	cpi	r24, 0xF2	; 242
 7aa:	95 41       	sbci	r25, 0x15	; 21
 7ac:	08 f0       	brcs	.+2      	; 0x7b0 <com_receive_data+0x14c>
 7ae:	3a c0       	rjmp	.+116    	; 0x824 <com_receive_data+0x1c0>
//	Return value: None
//
//**************************************************************************
static inline void bootloader_writePage(uint16_t PageAddress, uint8_t *data)
{
	cli();
 7b0:	f8 94       	cli
 7b2:	f9 01       	movw	r30, r18
 7b4:	31 96       	adiw	r30, 0x01	; 1
 7b6:	ab 01       	movw	r20, r22
 7b8:	40 5f       	subi	r20, 0xF0	; 240
 7ba:	5f 4f       	sbci	r21, 0xFF	; 255
		// Set up little-endian word.
		uint16_t word = data[i];
		i++;
		word |= (data[i] << 8);
		
		boot_page_fill ((PageAddress + i), word);
 7bc:	61 e0       	ldi	r22, 0x01	; 1
	cli();
	
	for (uint8_t i=0; i<FlashPageByteSize; i++)
	{
		// Set up little-endian word.
		uint16_t word = data[i];
 7be:	13 96       	adiw	r26, 0x03	; 3
 7c0:	8c 91       	ld	r24, X
 7c2:	13 97       	sbiw	r26, 0x03	; 3
		i++;
		word |= (data[i] << 8);
		
		boot_page_fill ((PageAddress + i), word);
 7c4:	14 96       	adiw	r26, 0x04	; 4
 7c6:	7c 91       	ld	r23, X
 7c8:	14 97       	sbiw	r26, 0x04	; 4
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	97 2b       	or	r25, r23
 7ce:	0c 01       	movw	r0, r24
 7d0:	60 93 57 00 	sts	0x0057, r22	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 7d4:	e8 95       	spm
 7d6:	11 24       	eor	r1, r1
 7d8:	12 96       	adiw	r26, 0x02	; 2
 7da:	32 96       	adiw	r30, 0x02	; 2
//**************************************************************************
static inline void bootloader_writePage(uint16_t PageAddress, uint8_t *data)
{
	cli();
	
	for (uint8_t i=0; i<FlashPageByteSize; i++)
 7dc:	4a 17       	cp	r20, r26
 7de:	5b 07       	cpc	r21, r27
 7e0:	71 f7       	brne	.-36     	; 0x7be <com_receive_data+0x15a>
		word |= (data[i] << 8);
		
		boot_page_fill ((PageAddress + i), word);
	}

	boot_page_write (PageAddress);     // Store buffer in flash page.
 7e2:	85 e0       	ldi	r24, 0x05	; 5
 7e4:	f9 01       	movw	r30, r18
 7e6:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 7ea:	e8 95       	spm
	boot_spm_busy_wait();       // Wait until the memory is written.
 7ec:	07 b6       	in	r0, 0x37	; 55
 7ee:	00 fc       	sbrc	r0, 0
 7f0:	fd cf       	rjmp	.-6      	; 0x7ec <com_receive_data+0x188>
	
	sei();
 7f2:	78 94       	sei
 7f4:	19 c0       	rjmp	.+50     	; 0x828 <com_receive_data+0x1c4>
					}
					break;


			case CMD_REBOOT:
					device_reboot();
 7f6:	f4 de       	rcall	.-536    	; 0x5e0 <device_reboot>
 7f8:	17 c0       	rjmp	.+46     	; 0x828 <com_receive_data+0x1c4>
					break;
						
			case CMD_APP_START:
					shared.deviceState = APP_CHECK_CRC;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	06 c0       	rjmp	.+12     	; 0x80a <com_receive_data+0x1a6>
					break;
					
			case CMD_APP_STOP:
					if(shared.deviceState == APP_RUNNING || shared.deviceState == APP_START)
 7fe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 802:	83 50       	subi	r24, 0x03	; 3
 804:	82 30       	cpi	r24, 0x02	; 2
 806:	80 f4       	brcc	.+32     	; 0x828 <com_receive_data+0x1c4>
					{
						shared.deviceState = APP_SHUTDOWN;
 808:	85 e0       	ldi	r24, 0x05	; 5
 80a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
 80e:	0c c0       	rjmp	.+24     	; 0x828 <com_receive_data+0x1c4>
					}
					break;

			case CMD_SET_ADDRESS:
					if(!device_updateAddress(data[1])) cmd_error ++;
 810:	11 96       	adiw	r26, 0x01	; 1
 812:	8c 91       	ld	r24, X
 814:	fa de       	rcall	.-524    	; 0x60a <device_updateAddress>
		kernel_command_t subcommand = data[0];
		uint16_t u16_temp = 0;
		uint8_t Ack_data[20];
		Ack_data[0] = subcommand | 0x80;
		uint8_t Ack_size = 1;
		uint8_t cmd_error = 0;
 816:	21 e0       	ldi	r18, 0x01	; 1
 818:	88 23       	and	r24, r24
 81a:	39 f0       	breq	.+14     	; 0x82a <com_receive_data+0x1c6>
 81c:	05 c0       	rjmp	.+10     	; 0x828 <com_receive_data+0x1c4>
 81e:	20 e0       	ldi	r18, 0x00	; 0
					if(shared.deviceState == APP_CRC_ERROR && bootloader_checkAppCRC(u16_temp) == 0)
					{
						shared.deviceState = APP_STOPPED;
					}
			
					Ack_size += 2;
 820:	43 e0       	ldi	r20, 0x03	; 3
 822:	04 c0       	rjmp	.+8      	; 0x82c <com_receive_data+0x1c8>
		uint8_t Ack_size = 1;
		uint8_t cmd_error = 0;
		
		if(size == 0) // in case no sub-command was received
		{
			cmd_error++;
 824:	21 e0       	ldi	r18, 0x01	; 1
 826:	01 c0       	rjmp	.+2      	; 0x82a <com_receive_data+0x1c6>
		kernel_command_t subcommand = data[0];
		uint16_t u16_temp = 0;
		uint8_t Ack_data[20];
		Ack_data[0] = subcommand | 0x80;
		uint8_t Ack_size = 1;
		uint8_t cmd_error = 0;
 828:	20 e0       	ldi	r18, 0x00	; 0
				
		kernel_command_t subcommand = data[0];
		uint16_t u16_temp = 0;
		uint8_t Ack_data[20];
		Ack_data[0] = subcommand | 0x80;
		uint8_t Ack_size = 1;
 82a:	41 e0       	ldi	r20, 0x01	; 1

			case CMD_SET_ADDRESS:
					if(!device_updateAddress(data[1])) cmd_error ++;
					break;
		}
		com_transmit_data(instruction_byte,&Ack_data[0],Ack_size,cmd_error);
 82c:	21 70       	andi	r18, 0x01	; 1
 82e:	be 01       	movw	r22, r28
 830:	6f 5f       	subi	r22, 0xFF	; 255
 832:	7f 4f       	sbci	r23, 0xFF	; 255
 834:	81 2f       	mov	r24, r17
 836:	c9 dd       	rcall	.-1134   	; 0x3ca <com_transmit_data>
	}
}
 838:	64 96       	adiw	r28, 0x14	; 20
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	f8 94       	cli
 83e:	de bf       	out	0x3e, r29	; 62
 840:	0f be       	out	0x3f, r0	; 63
 842:	cd bf       	out	0x3d, r28	; 61
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	1f 91       	pop	r17
 84a:	ff 90       	pop	r15
 84c:	ef 90       	pop	r14
 84e:	08 95       	ret

00000850 <tickTimer_init>:
	}
}

void tickTimer_reset(tickTimer_t *counter)
{
	*counter = tickCounter;
 850:	10 be       	out	0x30, r1	; 48
 852:	85 e0       	ldi	r24, 0x05	; 5
 854:	83 bf       	out	0x33, r24	; 51
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	89 bf       	out	0x39, r24	; 57
 85a:	81 eb       	ldi	r24, 0xB1	; 177
 85c:	82 bf       	out	0x32, r24	; 50
 85e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <tickCounter+0x1>
 862:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <tickCounter>
 866:	08 95       	ret

00000868 <tickTimer_interruptHandler>:
}

void tickTimer_interruptHandler(void)
{
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	4f 93       	push	r20
 878:	5f 93       	push	r21
 87a:	6f 93       	push	r22
 87c:	7f 93       	push	r23
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	af 93       	push	r26
 884:	bf 93       	push	r27
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
	#ifndef TEST_RUN
	com_5ms_tick();
 88a:	af dc       	rcall	.-1698   	; 0x1ea <com_5ms_tick>
	if(shared.deviceState == APP_RUNNING) app_5ms_tick();
 88c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 890:	84 30       	cpi	r24, 0x04	; 4
 892:	19 f4       	brne	.+6      	; 0x89a <tickTimer_interruptHandler+0x32>
}

typedef void (*PF_VOID)(void);
static inline void app_5ms_tick (void)
{
	((PF_VOID) (APP_5MS_TICK_ADDR ))();
 894:	e0 e2       	ldi	r30, 0x20	; 32
 896:	f5 e0       	ldi	r31, 0x05	; 5
 898:	09 95       	icall
	#endif
	tickCounter ++;
 89a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <tickCounter>
 89e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <tickCounter+0x1>
 8a2:	01 96       	adiw	r24, 0x01	; 1
 8a4:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <tickCounter+0x1>
 8a8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <tickCounter>
	#ifdef TINYAVR_1SERIES
	RTC.INTFLAGS |= 0x01;
	#endif
}
 8ac:	ff 91       	pop	r31
 8ae:	ef 91       	pop	r30
 8b0:	bf 91       	pop	r27
 8b2:	af 91       	pop	r26
 8b4:	9f 91       	pop	r25
 8b6:	8f 91       	pop	r24
 8b8:	7f 91       	pop	r23
 8ba:	6f 91       	pop	r22
 8bc:	5f 91       	pop	r21
 8be:	4f 91       	pop	r20
 8c0:	3f 91       	pop	r19
 8c2:	2f 91       	pop	r18
 8c4:	0f 90       	pop	r0
 8c6:	0f be       	out	0x3f, r0	; 63
 8c8:	0f 90       	pop	r0
 8ca:	1f 90       	pop	r1
 8cc:	18 95       	reti

000008ce <main>:
}

int main(void)
{	
	asm("CLR R1");		//		Clear Register 
 8ce:	11 24       	eor	r1, r1
	asm("OUT 0x3F,R1");	//		Out to I/O location 
 8d0:	1f be       	out	0x3f, r1	; 63

	// set stackpointer to 0x01FF (top of SRAM)
	asm("SER R28");		//		Set Register 
 8d2:	cf ef       	ldi	r28, 0xFF	; 255
	asm("LDI R29,0x01");//		Load immediate 
 8d4:	d1 e0       	ldi	r29, 0x01	; 1
	
	asm("OUT 0x3E,R29");//		Out to I/O location 
 8d6:	de bf       	out	0x3e, r29	; 62
	asm("OUT 0x3D,R28");//		Out to I/O location 
 8d8:	cd bf       	out	0x3d, r28	; 61
	asm("CPC R27,R18");	//		Compare with carry 
	asm("BRNE startup");//		Branch if not equal 
	
	*/

	PORTA = 0x80;
 8da:	80 e8       	ldi	r24, 0x80	; 128
 8dc:	8b bb       	out	0x1b, r24	; 27
	DDRA = 0xEF;
 8de:	8f ee       	ldi	r24, 0xEF	; 239
 8e0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;
 8e2:	17 ba       	out	0x17, r1	; 23
	
	MainPowerOn();
 8e4:	d8 98       	cbi	0x1b, 0	; 27
	CCP = 0xD8;		// Configuration Change Protection
 8e6:	88 ed       	ldi	r24, 0xD8	; 216
 8e8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
	WDTCSR = 0x47;	// Watchdog reset after 2s
 8ec:	87 e4       	ldi	r24, 0x47	; 71
 8ee:	81 bd       	out	0x21, r24	; 33
	reset_watchdog();
 8f0:	a8 95       	wdr
	
	device_init();
 8f2:	7d de       	rcall	.-774    	; 0x5ee <device_init>
	device_run();	// this function contains the main while(1) loop 
 8f4:	13 de       	rcall	.-986    	; 0x51c <device_run>
}
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	08 95       	ret

000008fc <eeprom_read_byte>:
 8fc:	e1 99       	sbic	0x1c, 1	; 28
 8fe:	fe cf       	rjmp	.-4      	; 0x8fc <eeprom_read_byte>
 900:	9f bb       	out	0x1f, r25	; 31
 902:	8e bb       	out	0x1e, r24	; 30
 904:	e0 9a       	sbi	0x1c, 0	; 28
 906:	99 27       	eor	r25, r25
 908:	8d b3       	in	r24, 0x1d	; 29
 90a:	08 95       	ret

0000090c <eeprom_update_byte>:
 90c:	26 2f       	mov	r18, r22

0000090e <eeprom_update_r18>:
 90e:	e1 99       	sbic	0x1c, 1	; 28
 910:	fe cf       	rjmp	.-4      	; 0x90e <eeprom_update_r18>
 912:	9f bb       	out	0x1f, r25	; 31
 914:	8e bb       	out	0x1e, r24	; 30
 916:	e0 9a       	sbi	0x1c, 0	; 28
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	0d b2       	in	r0, 0x1d	; 29
 91c:	02 16       	cp	r0, r18
 91e:	39 f0       	breq	.+14     	; 0x92e <eeprom_update_r18+0x20>
 920:	1c ba       	out	0x1c, r1	; 28
 922:	2d bb       	out	0x1d, r18	; 29
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	f8 94       	cli
 928:	e2 9a       	sbi	0x1c, 2	; 28
 92a:	e1 9a       	sbi	0x1c, 1	; 28
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	08 95       	ret
